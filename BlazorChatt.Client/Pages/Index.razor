@page "/"
@inject NavigationManager navigationManager
@using BlazorChatt.Client.Data



<div class="top-row px-4" >
    @if (chatting)
    {
        <p>Du bist angemeldet als <b>@username</b></p>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DiscounnectAsync">Abmelden</button>
    }
</div>

<div class="context px-4">
    <h1>Chat unseres Unternehmen</h1>
    @if(!chatting)
    {
        <h2>Chat</h2>
        <p> Geben Sie Ihre Name bitte um Chat zu starten </p>
        <input type="text" @bind="@username"/>
        <button @onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span>Chat!</button>
        @if(message!=null)
        {
            <div class="invalid-feedback">@message</div>
            <small id="emailHelp" class="form-text text-muted">@message</small>
        }
    }

    @if(chatting)
    {
        <div id="scrollbox">
            @foreach(var item in messages)
            {
            <div class="@item.CSS">

                <div class="user">@item.Username</div>
                <div class="user">@item.Body</div>
            </div>

            }
            <hr />
            <textarea class="input-group-lg" placeholder="Type Comments" @bind="@newMessage"></textarea>
        <button class="btn" @onclick="@SendAsync">senden</button>
        </div>
    }

</div>
@code {
    bool chatting = false;
    string username = null;
    ChatClient client = null;
    string message = null;
    string newMessage = null;
    List<Message> messages = new List<Message>();


    async Task Chat()
    {
        if(string.IsNullOrWhiteSpace(username))
        {
            message = "Geben Sie bitte Ihre name ein ";
            return;
        }
        try
        {
            messages.Clear();
            client = new ChatClient(username, navigationManager);
            client.MessageReceived += MessageReceived;
            Console.WriteLine("Index:chat starting....");
            await client.StartAsync();
            Console.WriteLine("Index:chat starting?");
            chatting = true;

        }
        catch(Exception e)
        {
            message = $"Error : Failed to start chat {e.Message}";
            Console.WriteLine(e.Message);
            Console.WriteLine(e.StackTrace);
        }
    }

    void MessageReceived(object sender , MessageReceivedEventArgs e)

    {
        Console.WriteLine($"Blazor: receive {e.Username} : {e.Message}");
        bool isMine = false;

        if(!string.IsNullOrWhiteSpace(e.Username))
        {
            isMine = string.Equals(e.Username, username, StringComparison.CurrentCultureIgnoreCase);
        }
        var newMsg = new Message(e.Username, e.Message, isMine);
        messages.Add(newMsg);
        StateHasChanged();
    }

    async Task DiscounnectAsync()
    {

        if(chatting)
        {
            await client.StopAsync();
            client = null;
            message = "Chat ist beendet";
            chatting = false;
        }
    }

    async Task SendAsync()
    {
        if(chatting && !string.IsNullOrWhiteSpace(newMessage))
        {
            await client.SendAsync(newMessage);
            newMessage = "";
        }
    }

    class Message
    {

        public Message(string username , string body , bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }
        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }
        public string CSS
        {
            get
            {
                return Mine ? "sent" : "received";
            }
        }
    }
}
